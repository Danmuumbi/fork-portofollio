{"ast":null,"code":"import React from\"react\";import{makeStyles,withStyles}from\"@material-ui/core/styles\";import Box from\"@material-ui/core/Box\";import TextField from\"@material-ui/core/TextField\";import Typography from\"@material-ui/core/Typography\";import Grid from\"@material-ui/core/Grid\";import Button from\"@material-ui/core/Button\";import Send from\"@material-ui/icons/Send\";import emailjs from\"emailjs-com\";import{Formik,Form,Field,ErrorMessage}from'formik';import*as Yup from'yup';const useStyles=makeStyles(theme=>({contactContainer:{background:\"black\",height:\"100vh\"},heading:{color:\"white\",textAlign:\"center\",textTransform:\"uppercase\",marginBottom:\"1rem\"},form:{top:\"50%\",left:\"50%\",transform:\"translate(-50%, -50%)\",position:\"absolute\"},input:{color:\"#fff\"},button:{marginTop:\"1rem\",color:\"white\",borderColor:\"tan\"},field:{margin:\"1rem 0rem\"}}));const InputField=withStyles({root:{\"& label.Mui-focused\":{color:\"white\"},\"& label\":{color:\"tan\"},\"& .MuiOutlinedInput-root\":{\"& fieldset\":{borderColor:\"tan\"},\"&:hover fieldset\":{borderColor:\"tan\"},\"&.Mui-focused fieldset\":{color:\"#fff\",borderColor:\"tan\"}}}})(TextField);const Contact=()=>{const classes=useStyles();const initialValues={name:'',email:'',message:''};const validationSchema=Yup.object().shape({name:Yup.string().required('Name is required'),email:Yup.string().email('Invalid email').required('Email is required'),message:Yup.string().required('Message is required')});const handleSubmit=async(values,_ref)=>{let{setSubmitting,resetForm}=_ref;try{await emailjs.send(\"service_rb23ccx\",// Your EmailJS Service ID\n\"template_ybmf1qd\",// Your EmailJS Template ID\n{name:values.name,email:values.email,message:values.message},\"FjnoGd26TgnnRvYtg\"// Your EmailJS Public Key (User ID)\n);console.log(\"Email sent successfully!\");resetForm();// Optionally, show a success message or redirect the user\n}catch(error){console.error(\"Error sending email:\",error);// Handle error (e.g., show error message)\n}finally{setSubmitting(false);}};return/*#__PURE__*/React.createElement(Box,{component:\"div\",className:classes.contactContainer},/*#__PURE__*/React.createElement(Grid,{container:true,justify:\"center\"},/*#__PURE__*/React.createElement(Formik,{initialValues:initialValues,validationSchema:validationSchema,onSubmit:handleSubmit},(_ref2)=>{let{isSubmitting}=_ref2;return/*#__PURE__*/React.createElement(Form,{className:classes.form},/*#__PURE__*/React.createElement(Typography,{variant:\"h5\",className:classes.heading},\"Contact me...\"),/*#__PURE__*/React.createElement(Field,{as:InputField,fullWidth:true,label:\"Name\",variant:\"outlined\",inputProps:{className:classes.input},name:\"name\",className:classes.field}),/*#__PURE__*/React.createElement(ErrorMessage,{name:\"name\",component:\"div\",className:classes.error}),/*#__PURE__*/React.createElement(Field,{as:InputField,fullWidth:true,label:\"Email\",variant:\"outlined\",inputProps:{className:classes.input},name:\"email\",className:classes.field}),/*#__PURE__*/React.createElement(ErrorMessage,{name:\"email\",component:\"div\",className:classes.error}),/*#__PURE__*/React.createElement(Field,{as:InputField,fullWidth:true,label:\"Message\",variant:\"outlined\",multiline:true,rows:4,inputProps:{className:classes.input},name:\"message\",className:classes.field}),/*#__PURE__*/React.createElement(ErrorMessage,{name:\"message\",component:\"div\",className:classes.error}),/*#__PURE__*/React.createElement(Button,{type:\"submit\",variant:\"outlined\",fullWidth:true,endIcon:/*#__PURE__*/React.createElement(Send,null),className:classes.button,disabled:isSubmitting},isSubmitting?'Submitting...':'Contact Me'));})));};export default Contact;","map":{"version":3,"sources":["/home/izzie/dev/izzie-portfolio/src/components/Contact.js"],"names":["React","makeStyles","withStyles","Box","TextField","Typography","Grid","Button","Send","emailjs","Formik","Form","Field","ErrorMessage","Yup","useStyles","theme","contactContainer","background","height","heading","color","textAlign","textTransform","marginBottom","form","top","left","transform","position","input","button","marginTop","borderColor","field","margin","InputField","root","Contact","classes","initialValues","name","email","message","validationSchema","object","shape","string","required","handleSubmit","values","setSubmitting","resetForm","send","console","log","error","isSubmitting","className"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Send from \"@material-ui/icons/Send\";\nimport emailjs from \"emailjs-com\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\n\nconst useStyles = makeStyles((theme) => ({\n  contactContainer: {\n    background: \"black\",\n    height: \"100vh\",\n  },\n  heading: {\n    color: \"white\",\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    marginBottom: \"1rem\",\n  },\n  form: {\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    position: \"absolute\",\n  },\n  input: {\n    color: \"#fff\",\n  },\n  button: {\n    marginTop: \"1rem\",\n    color: \"white\",\n    borderColor: \"tan\",\n  },\n  field: {\n    margin: \"1rem 0rem\",\n  },\n}));\n\nconst InputField = withStyles({\n  root: {\n    \"& label.Mui-focused\": {\n      color: \"white\",\n    },\n    \"& label\": {\n      color: \"tan\",\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"tan\",\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"tan\",\n      },\n      \"&.Mui-focused fieldset\": {\n        color: \"#fff\",\n        borderColor: \"tan\",\n      },\n    },\n  },\n})(TextField);\n\nconst Contact = () => {\n  const classes = useStyles();\n\n  const initialValues = {\n    name: '',\n    email: '',\n    message: '',\n  };\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    email: Yup.string().email('Invalid email').required('Email is required'),\n    message: Yup.string().required('Message is required'),\n  });\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    try {\n      await emailjs.send(\n        \"service_rb23ccx\", // Your EmailJS Service ID\n        \"template_ybmf1qd\", // Your EmailJS Template ID\n        {\n          name: values.name,\n          email: values.email,\n          message: values.message,\n        },\n        \"FjnoGd26TgnnRvYtg\" // Your EmailJS Public Key (User ID)\n      );\n      console.log(\"Email sent successfully!\");\n      resetForm();\n      // Optionally, show a success message or redirect the user\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      // Handle error (e.g., show error message)\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Box component=\"div\" className={classes.contactContainer}>\n      <Grid container justify=\"center\">\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting }) => (\n            <Form className={classes.form}>\n              <Typography variant=\"h5\" className={classes.heading}>\n                Contact me...\n              </Typography>\n              <Field\n                as={InputField}\n                fullWidth\n                label=\"Name\"\n                variant=\"outlined\"\n                inputProps={{ className: classes.input }}\n                name=\"name\"\n                className={classes.field}\n              />\n              <ErrorMessage name=\"name\" component=\"div\" className={classes.error} />\n              <Field\n                as={InputField}\n                fullWidth\n                label=\"Email\"\n                variant=\"outlined\"\n                inputProps={{ className: classes.input }}\n                name=\"email\"\n                className={classes.field}\n              />\n              <ErrorMessage name=\"email\" component=\"div\" className={classes.error} />\n              <Field\n                as={InputField}\n                fullWidth\n                label=\"Message\"\n                variant=\"outlined\"\n                multiline\n                rows={4}\n                inputProps={{ className: classes.input }}\n                name=\"message\"\n                className={classes.field}\n              />\n              <ErrorMessage name=\"message\" component=\"div\" className={classes.error} />\n              <Button\n                type=\"submit\"\n                variant=\"outlined\"\n                fullWidth\n                endIcon={<Send />}\n                className={classes.button}\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? 'Submitting...' : 'Contact Me'}\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}